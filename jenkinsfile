#!/usr/bin/env groovy
pipeline {
    agent any

    environment {
        ECR_URI= '368772107083.dkr.ecr.us-east-2.amazonaws.com/kalibra'
        REPOSITORY_URI= 'https://github.com/neymar32/kalibra.git'
        DATE = new Date().format('yy.M')
        TAG = "${DATE}.${BUILD_NUMBER}"
        REGION= 'us-east-2'
        BACKEND_API_ENDPOINT= 'https://preprod.kalibra.app/api/'
        DEBUG_MODE= false
        AWS_ECS_SERVICE = 'test'
        AWS_ECS_TASK_DEFINITION = 'test-cluster'
        AWS_ECS_COMPATIBILITY = 'FARGATE'
        AWS_ECS_EXECUTION_ROL = 'arn:aws:iam::368772107083:role/ecsTaskExecutionRole'
        AWS_ECS_NETWORK_MODE = 'awsvpc'
        AWS_ECS_TASK_DEFINITION_PATH = '/ecs/{task-definition-name}'
        AWS_ECS_CPU = '256'
        AWS_ECS_MEMORY = '512'
        AWS_ECS_CLUSTER = 'office-test'
        AWS_ECR_REGION = 'us-east-2'
        CLUSTER = 'test-cluster'
        AWS_REGION = 'us-east-2'
        SERVICE = 'test-cluster'
        AWS_PROFILE = 'default'
        
    }

    stages {
        stage("Prepare") {
            steps {
                 echo "Logging in....."
                 sh "aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 368772107083.dkr.ecr.us-east-2.amazonaws.com"
                 echo "Successfully Logged in..."
                
            }
        }

        stage("Build") {
            steps {
                sh "docker build -t ${ECR_URI}:latest ."
                echo "Build Complete"
                
            }
        }

        stage("Post Build") {
            steps {
                echo "Pushing into ECR"
                sh "docker push $ECR_URI:latest"
                echo "Push Complete"
            }
        }

 #Register the task definition in the repository
aws ecs register-task-definition --family ${FAMILY} --cli-input-json file://${WORKSPACE}/${NAME}-v_${BUILD_NUMBER}.json --region ${REGION}
SERVICES=`aws ecs describe-services --services ${SERVICE_NAME} --cluster ${CLUSTER} --region ${REGION} | jq .failures[]`#Get latest revision
REVISION=`aws ecs describe-task-definition --task-definition ${NAME} --region ${REGION} | jq .taskDefinition.revision`#Create or update service
if [ "$SERVICES" == "" ]; then
  echo "entered existing service"
  DESIRED_COUNT=`aws ecs describe-services --services ${SERVICE_NAME} --cluster ${CLUSTER} --region ${REGION} | jq .services[].desiredCount`
  if [ ${DESIRED_COUNT} = "0" ]; then
    DESIRED_COUNT="1"
  fi
  aws ecs update-service --cluster ${CLUSTER} --region ${REGION} --service ${SERVICE_NAME} --task-definition ${FAMILY}:${REVISION} --desired-count ${DESIRED_COUNT}
else
  echo "entered new service"
  aws ecs create-service --service-name ${SERVICE_NAME} --desired-count 1 --task-definition ${FAMILY} --cluster ${CLUSTER} --region ${REGION}
fi

