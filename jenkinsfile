#!/usr/bin/env groovy
pipeline {
    agent any

    environment {
        ECR_URI= '368772107083.dkr.ecr.us-east-2.amazonaws.com/kalibra'
        REPOSITORY_URI= 'https://github.com/anuroop32/kalibra-final.git'
        DATE = new Date().format('yy.M')
        TAG = "${DATE}.${BUILD_NUMBER}"
        REGION= 'us-east-2'
        BACKEND_API_ENDPOINT= 'https://preprod.kalibra.app/api/'
        DEBUG_MODE= false
        AWS_ECS_SERVICE = 'test'
        AWS_ECS_TASK_DEFINITION = 'test-cluster'
        AWS_ECS_COMPATIBILITY = 'FARGATE'
        AWS_ECS_EXECUTION_ROL = 'arn:aws:iam::368772107083:role/ecsTaskExecutionRole'
        AWS_ECS_NETWORK_MODE = 'awsvpc'
        AWS_ECS_TASK_DEFINITION_PATH = 'file://ecs/taskdefinition.json'
        AWS_ECS_CPU = '256'
        AWS_ECS_MEMORY = '512'
        AWS_ECS_CLUSTER = 'office-test'
        AWS_ECR_REGION = 'us-east-2'
        CLUSTER = 'test-cluster'
        AWS_REGION = 'us-east-2'
        SERVICE_NAME = 'test-cluster'
        AWS_PROFILE = 'default'
        FAMILY = 'office-test'
        BUILD_NUMBER = '1'
        WORKSPACE = 'test'
        
    }

    stages {
        stage("Prepare") {
            steps {
                 echo "Logging in....."
                 sh "aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 368772107083.dkr.ecr.us-east-2.amazonaws.com"
                 echo "Successfully Logged in..."
                
            }
        }

        stage("Build") {
            steps {
                sh "docker build -t ${ECR_URI}:latest ."
                echo "Build Complete"
                
            }
        }

        stage("Post Build") {
            steps {
                echo "Pushing into ECR"
                sh "docker push $ECR_URI:latest"
                echo "Push Complete"
            }
        }

        stage("Deploy in ECS") {
            steps {
              withAWS(credentials: "aws configure", region:"us-east-2") {
                script {
                  
     SERVICE_NAME="flask-signup-service"
     IMAGE_VERSION="v_"${BUILD_NUMBER}
     TASK_FAMILY="flask-signup"

echo Create a new task definition for this build
     sed -e "s;%BUILD_NUMBER%;${BUILD_NUMBER};g" flask-signup.json > flask-signup-v_${BUILD_NUMBER}.json
     aws ecs register-task-definition --family flask-signup --cli-input-json file://flask-signup-v_${BUILD_NUMBER}.json

 echo Update the service with the new task definition and desired count
TASK_REVISION=`aws ecs describe-task-definition --task-definition flask-signup | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//'`
DESIRED_COUNT=`aws ecs describe-services --services ${SERVICE_NAME} | egrep "desiredCount" | tr "/" " " | awk '{print $2}' | sed 's/,$//'`
if [ ${DESIRED_COUNT} = "0" ]; then
    DESIRED_COUNT="1"
fi

aws ecs update-service --cluster default --service ${SERVICE_NAME} --task-definition ${TASK_FAMILY}:${TASK_REVISION} --desired-count ${DESIRED_COUNT}
      }
    }
  }
 }
          }
}           

