#!/usr/bin/env groovy
pipeline {
    agent any

    environment {
        ECR_URI= '368772107083.dkr.ecr.us-east-2.amazonaws.com/kalibra'
        REPOSITORY_URI= 'https://github.com/anuroop32/kalibra-final.git'
        DATE = new Date().format('yy.M')
        TAG = "${DATE}.${BUILD_NUMBER}"
        REGION= 'us-east-2'
        BACKEND_API_ENDPOINT= 'https://preprod.kalibra.app/api/'
        DEBUG_MODE= false
        AWS_ECS_SERVICE = 'test'
        AWS_ECS_TASK_DEFINITION = 'test-cluster'
        AWS_ECS_COMPATIBILITY = 'FARGATE'
        AWS_ECS_EXECUTION_ROL = 'arn:aws:iam::368772107083:role/ecsTaskExecutionRole'
        AWS_ECS_NETWORK_MODE = 'awsvpc'
        AWS_ECS_TASK_DEFINITION_PATH = 'file://ecs/taskdefinition.json'
        AWS_ECS_CPU = '256'
        AWS_ECS_MEMORY = '512'
        AWS_ECS_CLUSTER = 'office-test'
        AWS_ECR_REGION = 'us-east-2'
        CLUSTER = 'test-cluster'
        AWS_REGION = 'us-east-2'
        SERVICE_NAME = 'test-cluster'
        SERVICE = 'test-cluster'
        AWS_PROFILE = 'default'
        FAMILY = 'office-test'
        BUILD_NUMBER = '1'
        WORKSPACE = 'test'
        
    }

    stages {
        stage("Prepare") {
            steps {
                 echo "Logging in....."
                 sh "aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 368772107083.dkr.ecr.us-east-2.amazonaws.com"
                 echo "Successfully Logged in..."
                
            }
        }

        stage("Build") {
            steps {
                sh "docker build -t ${ECR_URI}:latest ."
                echo "Build Complete"
                
            }
        }

        stage("Post Build") {
            steps {
                echo "Pushing into ECR"
                sh "docker push $ECR_URI:latest"
                echo "Push Complete"
            }
        }

        stage("Deploy in ECS") {
            steps {
              withAWS(credentials: "aws configure", region:"us-east-2") {
                script {
                
                
    "service" = {
        "status" = 'ACTIVE'
        "taskDefinition" = "arn:aws:ecs:us-east-2:368772107083:task-definition/test-cluster:3",
        "desiredCount" = 0,
        "serviceName" = "test-cluster",
        "clusterArn" = "arn:aws:ecs:us-east-2:368772107083:cluster/test-cluster",
        "serviceArn" = "arn:aws:ecs:us-east-2:368772107083:service/test-cluster",
        "runningCount" = 0
    }
                  

   update-service:
    echo "Updating service for $(CLUSTER) -- $(SERVICE)"
    aws ecs update-service --profile $(AWS_PROFILE) --region $(AWS_REGION) --cluster $(CLUSTER) --service $(SERVICE) --force-new-deployment

   update-queue-service:
    @echo "Updating service for $(CLUSTER) -- $(QUEUE_SERVICE)"
    aws ecs update-service --profile $(AWS_PROFILE) --region $(AWS_REGION) --cluster $(CLUSTER) --service $(QUEUE_SERVICE) --force-new-deployment

   update-scheduler-service:
    @echo "Updating service for $(CLUSTER) -- $(SCHEDULER_SERVICE)"
    aws ecs update-service --profile $(AWS_PROFILE) --region $(AWS_REGION) --cluster $(CLUSTER) --service $(SCHEDULER_SERVICE) --force-new-deployment

      }
    }
  }
 }
          }
}           

